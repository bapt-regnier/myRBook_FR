[
["premiersPas.html", " 4 Premiers pas 4.1 Installation de R 4.2 R comme calculatrice 4.3 La notion d’objet 4.4 Les scripts 4.5 Conclusion", " 4 Premiers pas 4.1 Installation de R Le programme permettant l’installation du logiciel R peut être téléchargé depuis le site web de R : https://www.r-project.org/. Sur le site de R il faut au préalable choisir un mirroir CRAN (serveur depuis lequel télécharger R ; sauf cas particulier le plus proche de sa localisation géographique), puis télécharger le fichier base. Les utilisateurs de Linux pourront préférer un sudo apt-get install r-base. Le logiciel R peut être téléchargé depuis de nombreux serveurs du CRAN (Comprehensive R Archive Network) à travers le monde. Ces serveurs s’appellent des miroirs. Le choix du miroir est manuel. 4.2 R comme calculatrice Une fois le programme lancé, une fenêtre apparaît dont l’aspect peut varier en fonction de votre système d’exploitation (Figure 4.1). Cette fenêtre est dénommée la console. Figure 4.1: Capture d’écran de la console R sous Windows. La console correspond à l’interface où va être interprété le code, c’est à dire à l’endroit où le code va être transformé en langage machine, exécuté par l’ordinateur, puis retransmis sous une forme lisible par des humains. Cela correspond à l’écran d’affichage d’une calculatrice (Figure 4.2). C’est de cette manière que R va être utilisé dans la suite de cette section. Tout au long de ce livre, les exemples de code R apparaîtront sur fond en gris. Ils peuvent être copiés et collés directement dans la console, bien qu’il soit préférable de reproduire soit même les exemples dans la console (ou plus tard dans les scripts). Le résultat de ce qui est envoyé dans la console apparaîtra également sur fond en gris avec ## devant le code afin de bien faire la distinction entre le code et le résultat du code. Figure 4.2: Capture d’écran de la console R sous Windows avec la calculatrice Windows. 4.2.1 Les opérateurs arithmétiques 5 + 5 ## [1] 10 Si nous écrivons 5 + 5 dans la console puis Entrée, le résultat apparaît précédé du chiffre [1] entre crochets. Ce chiffre correspond au numéro du résultat (dans notre cas, il n’y a qu’un seul résultat ; nous reviendrons sur cet aspect plus tard). Nous pouvons également noter dans cet exemple l’utilisation d’espaces avant et après le signe +. Ces espaces ne sont pas nécessaires mais permettent au code d’être plus lisible par les humains (i.e., plus agréable à lire pour nous comme pour les personnes avec qui nous serons amenés à partager notre code). Les opérateurs aritmétiques disponibles sous R sont résumés dans la table 4.1. Table 4.1: Opérateurs arithmétiques. Label Operateur Exemple Addition + 5 + 5 Soustraction - 5 - 5 Multiplication * 5*5 Division / 5/5 Puissance ^ 5^5 Modulo %% 5 %% 5 Quotien Décimal %/% 5 %/% 5 Classiquement, les multiplications et les divisions sont prioritaires sur les additions et les soustractions. Au besoin nous pouvons utiliser des parenthèses. 5 + 5 * 2 ## [1] 15 (5 + 5) * 2 ## [1] 20 L’opérateur modulo correspond au reste de la division euclidienne. Il est souvent utilisé en informatique par exemple pour savoir si un nombre est pair ou impair (un nombre modulo 2 va renvoyer 1 si il est impair et 0 si il est pair). 451 %% 2 ## [1] 1 288 %% 2 ## [1] 0 (5 + 5 * 2) %% 2 ## [1] 1 ((5 + 5) * 2) %% 2 ## [1] 0 R intègre également certaines constantes dont pi. Par ailleurs le signe infini est représenté par Inf pi ## [1] 3.141593 pi * 5^2 ## [1] 78.53982 1/0 ## [1] Inf le style du code est important car le code est destiné à être lisible par nous plus tard et par d’autres personnes de manière générale. Pour avoir un style lisible il est recommandé de mettre des espaces avant et après les opérateurs arithmétiques. Les informations concernant le style seront toujours représentées avec ce pictogramme afin qu’elles soient facilement identifiables. 4.2.2 Les opérateurs de comparaison R est cependant bien plus qu’une simple calculatrice puisque’il permet un autre type d’opérateurs : les opérateurs de comparaison. Ils servent comme leur nom l’indique à comparer des valeurs entre elles (Table 4.2). Table 4.2: Opérateurs de comparaison. Label Operador plus petit que &lt; plus grand que &gt; plus petit ou égal à &lt;= plus grand ou égal à &gt;= égal à == différent de != Par exemple si nous voulons savoir si un chiffre est plus grand qu’un autre, nous pouvons écrire : 5 &gt; 3 ## [1] TRUE R renvoie la valeur TRUE si la comparasion est vraie et FALSE si la comparaison est fausse. 5 &gt; 3 ## [1] TRUE 2 &lt; 1.5 ## [1] FALSE 2 &lt;= 2 ## [1] TRUE 3.2 &gt;= 1.5 ## [1] TRUE Nous pouvons combiner les opérateurs arithmétiques avec les opérateurs de comparasion. (5 + 8) &gt; (3 * 45/2) ## [1] FALSE Dans la comparasion (5 + 8) &gt; (3 * 45/2) les parenthèses ne sont pas nécessaires mais elles permettent au code d’être plus facile à lire. Un opérateur de comparaison particulier est égal à. Nous verrons dans la section suivante que le signe = est réservé à un autre usage : il permet d’affecter une valeur à un objet. L’opérateur de comparaison égal à doit donc être différent, c’est pour cela que R utilise ==. 42 == 53 ## [1] FALSE 58 == 58 ## [1] TRUE Un autre opérateur particulier est différent de. Il est utilisé avec un point d’intérrogation suivi de égal, !=. Cet opérateur permet de d’obtenir la réponse inverse à ==. 42 == 53 ## [1] FALSE 42 != 53 ## [1] TRUE (3 + 2) != 5 ## [1] FALSE 10/2 == 5 ## [1] TRUE R utilise TRUE et FALSE qui sont aussi des valeurs qui peuvent être testées avec les opérateurs de comparasion. Mais R attribue également une valeur à TRUE et FALSE : TRUE == TRUE ## [1] TRUE TRUE &gt; FALSE ## [1] TRUE 1 == TRUE ## [1] TRUE 0 == FALSE ## [1] TRUE TRUE + 1 ## [1] 2 FALSE + 1 ## [1] 1 (FALSE + 1) == TRUE ## [1] TRUE La valeur de TRUE est de 1 et la valeur de FALSE est de 0. Nous verrons plus tard comment utiliser cette information dans les prochains chapitres. R est aussi un langage relativement permissif, cela veut dire qu’il admet une certaine flexibilité dans la manière de rédiger le code. Débattre du bien fondé de cette flexibilité sort du cadre de ce livre mais nous pourrons trouver dans du code R sur Internet ou dans d’autres ouvrages le raccourcis T pour TRUE et F pour FALSE. T == TRUE ## [1] TRUE F == FALSE ## [1] TRUE T == 1 ## [1] TRUE F == 0 ## [1] TRUE (F + 1) == TRUE ## [1] TRUE Bien que cette façon de se référer à TRUE et FALSE par T et F soit assez répandue, dans ce livre nous utiliserons toujours TRUE et FALSE afin que le code soit plus facile à lire. Encore une fois l’objectif d’un code est de non seuleument être fonctionnel mais aussi d’être facile à lire et à relire. 4.2.3 Les opérateurs logiques Il existe un dernier type d’opérateur, les opérateurs logiques. Ils sont utiles pour combiner des opérateurs de comparaison (Table 4.3). Table 4.3: Opérateurs logiques. Label Operador n’est pas ! et &amp; ou | ou exclusif xor() !TRUE ## [1] FALSE !FALSE ## [1] TRUE ((3 + 2) == 5) &amp; ((3 + 3) == 5) ## [1] FALSE ((3 + 2) == 5) &amp; ((3 + 3) == 6) ## [1] TRUE (3 &lt; 5) &amp; (5 &lt; 5) ## [1] FALSE (3 &lt; 5) &amp; (5 &lt;= 5) ## [1] TRUE L’opérateur logique xor() correspond à un ou exclusif. C’est à dire que l’un des deux arguments de la fonction xor() doit être vrai, mais pas les deux. Nous reviendrons plus tard sur les fonctions et leurs arguments, mais retenons que l’on identifie une fonction par ses parenthèses qui contiennent des arguments séparés par des virgules. xor((3 + 2) == 5, (3 + 3) == 6) ## [1] FALSE xor((3 + 2) == 5, (3 + 2) == 6) ## [1] TRUE xor((3 + 3) == 5, (3 + 2) == 6) ## [1] FALSE xor((3 + 3) == 5, (3 + 3) == 6) ## [1] TRUE Il est recommandé que les virgules , soient suivies par un espace afin que le code soit plus agréable à lire. 4.2.4 Aide sur les opérateurs Le fichier d’aideen anglais sur les opérateurs arithmétiques peut être obtenue avec la commande ?'+' celui sur les opérateurs de comparaison avec la commande ?'==' et celui sur les opérateurs logiques avec la commande ?'&amp;'. 4.3 La notion d’objet Un aspect important de la programmation avec R, mais aussi de la programmation en général est la notion d’objet. Comme indiqué sur la page web de wikipedia (https://fr.wikipedia.org/wiki/Objet_(informatique)), en informatique, un objet est un conteneur, c’est à dire quelque chose qui va contenir de l’information. L’inforamtion contenue dans un objet peut être très diverse, mais pour le moment nous allons contenir dans un objet le chiffre 5. Pour ce faire (et pour pouvoir le réutiliser par la suite), il nous faut donner un nom à notre objet. Avec R le nom des objets ne doit pas comprendre de caractères spéciaux comme ^$?|+()[]}{, ne doit pas commencer par un chiffre ni contenir d’espaces. Le nom de l’objet doit être représentatif de ce qu’il contient, tout en étant ni trop court ni trop long. Imaginons que notre chiffre 5 corresponde au nombre de répétitions d’une expérience. Nous voudrions lui donner un nom faisant référence à nombre et à répétition, que nous pourrions réduire à nbr et rep, respectivement. Il existe plusieurs possibilités qui sont toutes assez répandues sous R : la séparation au moyen du caractère tiret bas : nbr_rep la séparation au moyen du caractère point : nbr.rep l’utilisation de lettres minuscules : nbrrep le style lowerCamelCase consistant en un premier mot en minuscules et des suivants avec une majuscule : nbrRep le style UpperCamelCase consistant à mettre une majuscule au début de chacun des mots : NbrRep Toutes ces formes de nommer un objet sont équivalentes. Dans ce livre nous utiliserons le style lowerCamelCase. De manière générale il faut éviter les noms trop longs comme leNombreDeRepetitions ou trop courts comme nR, et les noms ne permettant pas d’identifier le contenu comme maVariable ou monChiffre, mais aussi a ou b… Il existe différentes façons de définir un nom pour les objets que nous allons créer avec R. Dans ce livre il est utilisé le style lowerCamelCase. L’important n’est pas le choix du style mais la consistence dans son choix. L’objectif est d’avoir un code fonctionnel mais également un code facile et agréable à lire. Maintenant que nous avons choisi un nom pour notre objet, il faut le créer et faire comprendre à R que notre objet doit contenir le chiffre 5. Il existe trois façons de créer un objet sous R: avec le signe &lt;- avec le signe = avec le signe -&gt; nbrRep &lt;- 5 nbrRep = 5 5 -&gt; nbrRep Dans ce livre nous utiliserons toujours la forme &lt;- par souci de consistence et aussi parce que c’est la forme la plus répendue. nbrRep &lt;- 5 Nous venons de créer un objet nbrRep et de lui affecter la valeur 5. Cet objet est désormais disponible dans notre environnement de calcul et peut donc être utilisé. Voici quelques exemples : nbrRep + 2 ## [1] 7 nbrRep * 5 - 45/56 ## [1] 24.19643 pi * nbrRep^2 ## [1] 78.53982 La valeur associée à notre objet nbrRep peut être modifiée de la même manière que lors de sa création : nbrRep &lt;- 5 nbrRep + 2 ## [1] 7 nbrRep &lt;- 10 nbrRep + 2 ## [1] 12 nbrRep &lt;- 5 * 2 + 7/3 nbrRep + 2 ## [1] 14.33333 L’utilisation des objets prend tout son sens lorsque nous avons des opérations complexes à réaliser et rend le code plus agréable à lire et à comprendre. (5 + 9^2 - 1/18) / (32 * 45/8 + 3) ## [1] 0.4696418 terme01 &lt;- 5 + 9^2 - 1/18 terme02 &lt;- 32 * 45/8 + 3 terme01 / terme02 ## [1] 0.4696418 4.4 Les scripts R est un langage de programmation souvent dénommé langage de script. Cela fait référence au fait que la plupart des utilisateurs vont écrire des petits bouts de code plutôt que des programmes entiers. R peut être utilisé comme une simple calculatrice, et dans ce cas il ne sera pas nécessaire de conserver un historique des opérations qui ont été réalisées. Mais si les opérations à réliser sont longues et complexes, il peut devenir nécessaire de pouvoir sauvegarder ce qui a été fait à un moment donné pour pouvoir poursuivre plus tard. Le fichier dans lequel seront conservées les opérations consitue ce que l’on appelle communement le script. Un script est donc un fichier contenant une succession d’informations compréhensibles par R et qu’il est possible d’exécuter. 4.4.1 Créer un script et le documenter Pour ouvrir un nouveau script il suffit de créer un fichier texte vide qui sera édité par un éditeur de texte comme le bloc note sous Windows ou Mac OS, ou encore Gedit ou même nano sous Linux. Par convention ce fichier prend l’extension “.r” ou plus souvent “.R”. C’est cette dernière convention qui sera utilisée dans ce livre. Depuis l’interface graphique de R il est possible de créer un nouveux script sous Mac OS et Windows via fichier puis nouveau script et enregistrer sous. Tout comme le nom des objets, le nom du script est important pour que nous puissions facilement identifier son contenu. Par exemple nous pourrions créer un fichier formRConceptsBase.R contenant les objets que nous venons de créer et les calculs effectués. Mais même avec des noms de variables et un nom de fichier bien définis, il sera difficile de se rappeler le sens de cce fichier sans une documentation accompagnant ce script. Pour docummenter un script nous allons utiliser des commentaires. Les commentaires sont des éléments qui seront identifiés par R comme tel et qui ne seront pas exécutés. Pour spécifier à R que nous allons faire un commentaire, il faut utiliser le caractère octothorpe (croisillon) #. Les commentaires peuvent être insérés sur une nouvelle ligne ou en fin de ligne. # creation objet nombre de repetitions nbrRep &lt;- 5 # commentaire de fin de ligne Les commentaires peuvent aussi être utilisé pour qu’une ligne ne soit plus exécutée. nbrRep &lt;- 5 # nbrRep + 5 Pour en revenir à la documentation du script, il est recommandé de commencer chacun de ses scripts par une brève description de son contenu, puis lorsque le script devient long, de le structurer en différentes parties pour faciliter sa lecture. # ------------------------------------------------------------ # Voici un script pour acquérir les concepts de base # avec R # date de création : 25/06/2018 # auteur : François Rebaudo # ------------------------------------------------------------ # [1] création de l&#39;objet nombre de répétitions # ------------------------------------------------------------ nbrRep &lt;- 5 # [2] calculs simples # ------------------------------------------------------------ pi * nbrRep^2 ## [1] 78.53982 Pour aller plus loin sur le style de code, un guide complet de recommandations est disponible en ligne (en anglais ; http://style.tidyverse.org/). 4.4.2 Exécuter un script Depuis que nous avons un script, nous ne travaillons plus directement dans la console. Or seule la console est capable d’interpérter le code R et de nous renvoyer les résultats que nous souhaitons obtenir. Pour l’instant la technique la plus simple consiste à copier-coller les lignes que nous souhaitons exécuter depuis notre script vers la console. A partir de maintenant nous n’allons plus utiliser les éditeurs de texte comme le bloc note mais des éditeurs spécialisés pour la confection de scripts R. C’est l’objet du chapitre suivant. 4.5 Conclusion Félicitations, nous avons atteint la fin de ce premier chapitre sur les éléments de base de R. Nous savons: Installer R Utiliser R comme une calculatrice Créez objets et les utiliser pour les calculs arithmétiques, de comparaison et de logique Choisir des noms pertinents pour les objets Créer de nouveaux script Choisir un nom pertinent pour les fichiers de script Exécuter le code d’un script Documenter les scripts avec des commentaires Utiliser un style de code pour le rendre agréable à lire et facile à comprendre "]
]
